#include "rsqrt_table.hpp"

#include <doctest.h>

#include <math.h>
#include <stdio.h>

#if RSQRT_TABLE_BITS == 5
const uint16_t rsqrt_table[33] = {
    0x0fff, 0x2d41, 0x2000, 0x1a21, 0x16a1, 0x143d, 0x127a, 0x111b,
    0x1000, 0x0f16, 0x0e50, 0x0da5, 0x0d10, 0x0c8d, 0x0c18, 0x0baf,
    0x0b50, 0x0afa, 0x0aab, 0x0a62, 0x0a1f, 0x09e0, 0x09a6, 0x0970,
    0x093d, 0x090d, 0x08e0, 0x08b6, 0x088d, 0x0867, 0x0843, 0x0821,
    0x0800,
};
#endif

#if RSQRT_TABLE_BITS == 6
const uint16_t rsqrt_table[65] = {
    0x0fff, 0x4000, 0x2d41, 0x24f3, 0x2000, 0x1c9f, 0x1a21, 0x1831,
    0x16a1, 0x1555, 0x143d, 0x134c, 0x127a, 0x11c0, 0x111b, 0x1086,
    0x1000, 0x0f86, 0x0f16, 0x0eaf, 0x0e50, 0x0df7, 0x0da5, 0x0d58,
    0x0d10, 0x0ccd, 0x0c8d, 0x0c51, 0x0c18, 0x0be2, 0x0baf, 0x0b7f,
    0x0b50, 0x0b24, 0x0afa, 0x0ad1, 0x0aab, 0x0a86, 0x0a62, 0x0a40,
    0x0a1f, 0x09ff, 0x09e0, 0x09c3, 0x09a6, 0x098a, 0x0970, 0x0956,
    0x093d, 0x0925, 0x090d, 0x08f6, 0x08e0, 0x08cb, 0x08b6, 0x08a1,
    0x088d, 0x087a, 0x0867, 0x0855, 0x0843, 0x0832, 0x0821, 0x0810,
    0x0800,
};
#endif

#if RSQRT_TABLE_BITS == 7
const uint16_t rsqrt_table[129] = {
    0x0fff, 0x5a82, 0x4000, 0x3441, 0x2d41, 0x287a, 0x24f3, 0x2236,
    0x2000, 0x1e2b, 0x1c9f, 0x1b4a, 0x1a21, 0x191a, 0x1831, 0x175f,
    0x16a1, 0x15f4, 0x1555, 0x14c4, 0x143d, 0x13c0, 0x134c, 0x12df,
    0x127a, 0x121a, 0x11c0, 0x116b, 0x111b, 0x10cf, 0x1086, 0x1042,
    0x1000, 0x0fc1, 0x0f86, 0x0f4d, 0x0f16, 0x0ee1, 0x0eaf, 0x0e7e,
    0x0e50, 0x0e23, 0x0df7, 0x0dcd, 0x0da5, 0x0d7e, 0x0d58, 0x0d34,
    0x0d10, 0x0cee, 0x0ccd, 0x0cad, 0x0c8d, 0x0c6f, 0x0c51, 0x0c34,
    0x0c18, 0x0bfd, 0x0be2, 0x0bc9, 0x0baf, 0x0b97, 0x0b7f, 0x0b67,
    0x0b50, 0x0b3a, 0x0b24, 0x0b0f, 0x0afa, 0x0ae5, 0x0ad1, 0x0abe,
    0x0aab, 0x0a98, 0x0a86, 0x0a73, 0x0a62, 0x0a51, 0x0a40, 0x0a2f,
    0x0a1f, 0x0a0e, 0x09ff, 0x09ef, 0x09e0, 0x09d1, 0x09c3, 0x09b4,
    0x09a6, 0x0998, 0x098a, 0x097d, 0x0970, 0x0963, 0x0956, 0x0949,
    0x093d, 0x0931, 0x0925, 0x0919, 0x090d, 0x0902, 0x08f6, 0x08eb,
    0x08e0, 0x08d5, 0x08cb, 0x08c0, 0x08b6, 0x08ab, 0x08a1, 0x0897,
    0x088d, 0x0884, 0x087a, 0x0871, 0x0867, 0x085e, 0x0855, 0x084c,
    0x0843, 0x083a, 0x0832, 0x0829, 0x0821, 0x0818, 0x0810, 0x0808,
    0x0800,
};
#endif

#if RSQRT_TABLE_BITS == 8
const uint16_t rsqrt_table[257] = {
    0x0fff, 0x8000, 0x5a82, 0x49e7, 0x4000, 0x393e, 0x3441, 0x3061,
    0x2d41, 0x2aab, 0x287a, 0x2698, 0x24f3, 0x2380, 0x2236, 0x210d,
    0x2000, 0x1f0b, 0x1e2b, 0x1d5d, 0x1c9f, 0x1bef, 0x1b4a, 0x1ab1,
    0x1a21, 0x199a, 0x191a, 0x18a2, 0x1831, 0x17c5, 0x175f, 0x16fd,
    0x16a1, 0x1648, 0x15f4, 0x15a3, 0x1555, 0x150b, 0x14c4, 0x147f,
    0x143d, 0x13fe, 0x13c0, 0x1385, 0x134c, 0x1315, 0x12df, 0x12ac,
    0x127a, 0x1249, 0x121a, 0x11ec, 0x11c0, 0x1195, 0x116b, 0x1142,
    0x111b, 0x10f4, 0x10cf, 0x10aa, 0x1086, 0x1064, 0x1042, 0x1020,
    0x1000, 0x0fe0, 0x0fc1, 0x0fa3, 0x0f86, 0x0f69, 0x0f4d, 0x0f31,
    0x0f16, 0x0efb, 0x0ee1, 0x0ec8, 0x0eaf, 0x0e96, 0x0e7e, 0x0e67,
    0x0e50, 0x0e39, 0x0e23, 0x0e0d, 0x0df7, 0x0de2, 0x0dcd, 0x0db9,
    0x0da5, 0x0d91, 0x0d7e, 0x0d6b, 0x0d58, 0x0d46, 0x0d34, 0x0d22,
    0x0d10, 0x0cff, 0x0cee, 0x0cdd, 0x0ccd, 0x0cbd, 0x0cad, 0x0c9d,
    0x0c8d, 0x0c7e, 0x0c6f, 0x0c60, 0x0c51, 0x0c43, 0x0c34, 0x0c26,
    0x0c18, 0x0c0b, 0x0bfd, 0x0bf0, 0x0be2, 0x0bd5, 0x0bc9, 0x0bbc,
    0x0baf, 0x0ba3, 0x0b97, 0x0b8b, 0x0b7f, 0x0b73, 0x0b67, 0x0b5c,
    0x0b50, 0x0b45, 0x0b3a, 0x0b2f, 0x0b24, 0x0b19, 0x0b0f, 0x0b04,
    0x0afa, 0x0af0, 0x0ae5, 0x0adb, 0x0ad1, 0x0ac8, 0x0abe, 0x0ab4,
    0x0aab, 0x0aa1, 0x0a98, 0x0a8f, 0x0a86, 0x0a7c, 0x0a73, 0x0a6b,
    0x0a62, 0x0a59, 0x0a51, 0x0a48, 0x0a40, 0x0a37, 0x0a2f, 0x0a27,
    0x0a1f, 0x0a16, 0x0a0e, 0x0a07, 0x09ff, 0x09f7, 0x09ef, 0x09e8,
    0x09e0, 0x09d9, 0x09d1, 0x09ca, 0x09c3, 0x09bb, 0x09b4, 0x09ad,
    0x09a6, 0x099f, 0x0998, 0x0991, 0x098a, 0x0984, 0x097d, 0x0976,
    0x0970, 0x0969, 0x0963, 0x095c, 0x0956, 0x0950, 0x0949, 0x0943,
    0x093d, 0x0937, 0x0931, 0x092b, 0x0925, 0x091f, 0x0919, 0x0913,
    0x090d, 0x0907, 0x0902, 0x08fc, 0x08f6, 0x08f1, 0x08eb, 0x08e6,
    0x08e0, 0x08db, 0x08d5, 0x08d0, 0x08cb, 0x08c5, 0x08c0, 0x08bb,
    0x08b6, 0x08b0, 0x08ab, 0x08a6, 0x08a1, 0x089c, 0x0897, 0x0892,
    0x088d, 0x0889, 0x0884, 0x087f, 0x087a, 0x0875, 0x0871, 0x086c,
    0x0867, 0x0863, 0x085e, 0x085a, 0x0855, 0x0851, 0x084c, 0x0848,
    0x0843, 0x083f, 0x083a, 0x0836, 0x0832, 0x082d, 0x0829, 0x0825,
    0x0821, 0x081d, 0x0818, 0x0814, 0x0810, 0x080c, 0x0808, 0x0804,
    0x0800,
};
#endif

static void DemoRsqrt(double i) {
    auto got = Rsqrt_table_2_22(i * 0x40'0000);
    auto exp = 4096.0f / sqrt(i);
    printf("Rsqrt(%5.2f) = %5d (vs %7.2f)\n", i, got, exp);
//    printf("CHECK_EQ(Rsqrt_table_2_22(%4d), %5d);\n", i * 0x40'0000, got);
}

TEST_CASE("Rsqrt_table") {
    for (int i = 0; i < 100; i++) {
        auto input = pow(2, i * 0.02);
        auto exp = (int)(4096.0f / sqrt(input));
        auto got = (int)Rsqrt_table_2_22((uint32_t)(input * 0x40'0000));
        CHECK_LE(abs(got - exp), exp / 100);
    }

//    for (int i = 0; i <= 20; i++) {
//        DemoRsqrt(pow(2, i * 0.1));
//    }

    float total_error = 0.0f;
    float total_bias = 0.0f;
    float max_error = 0.0f;

    for (int i = 0; i < 100; i++) {
        auto input = pow(2, i * 0.02);
        auto exp = (4096.0f / sqrt(input));
        auto got = Rsqrt_table_2_22((uint32_t)(input * 0x40'0000));

        total_bias += got - exp;
        total_error += fabs(got - exp);

        if (fabs(got - exp) > max_error) {
            max_error = fabs(got - exp);
        }
    }
    printf("TOTAL ERROR: %f\tTOTAL BIAS: %f\tMAX ERROR: %f\n", total_error, total_bias, max_error);
}
